#include<stdio.h>

#include<omp.h>

#include<error.h>

#include<gd.h>

int main(int argc,char *argv[])

{

 int nt=4;

 int tmp,tid,red,green,blue,color,x,y,w,h;

 tmp=tid=red=green=blue=color=x=y=w=h=0;

 char *iname=NULL;

 char *oname=NULL;

 gdImagePtr img;

 FILE *fp={0};

 if(argc!=3)

  error(1,0,"format_object_file input.png output.png");

 else

 {

  iname = argv[1];

  oname = argv[2];

  }

 if((fp=fopen(iname,"r"))==NULL)

  error(1,0,"error:open %s",iname);

 else

 {

  img = gdImageCreateFromPng(fp);

  w=gdImageSX(img);

  h=gdImageSY(img);

  }

  double t =omp_get_wtime();

  omp_set_num_threads(nt);

  #pragma omp parallel for private(y,color,red,green,blue,tmp,tid) schedule(guided,50)

  for(x=0;x<w;x++)

   for(y=0;y<h;y++)

    {

      tid=omp_get_thread_num();

      color=gdImageGetPixel(img,x,y);

      red=gdImageRed(img,color);

      green=gdImageGreen(img,color);

      blue=gdImageBlue(img,color);

      tmp=(red+green+blue)/3;

      red=blue=green=tmp;

      color=gdImageColorAllocate(img,red,green,blue);

      gdImageSetPixel(img,x,y,color);

      }

  t=omp_get_wtime()-t;

  printf("\n time taken:%lf and thread :%d\n",t,nt);

  if((fp=fopen(oname,"w"))==NULL)

     error(1,0,"error:open %s",iname);

  else{

       gdImagePng(img,fp);

       fclose(fp);

       }

       gdImageDestroy(img);

       return 0;

       }

          

     

       

     
